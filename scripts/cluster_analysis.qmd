---
title: "Food security analysis"
format: html
editor: visual
---

# Select the set of variables

```{r load}
# save(hh_food_prod, cluster_data, food_employment, s16a_me_agric, conso_agg, survey_welfare, s04_me_employment, survey_ind, cluster_data, wt_cluster_data, mean_cluster_list, file = 'data/cluster_analysis.RData')
load(here('data','short_survey.RData'))
load(here('data','conso_survey.RData'))
load(here('data','full_survey.RData'))

load(here('data','grappes.RData'))
load(here('data','ner_adm.RData'))

```

```{r agriculture}

dist_agric <- s03_co_agric |> 
  select(grappe, vague, dist_eqp_ag = s03q07, dist_seed = s03q09,
         dist_org_fertilizer = s03q11, dist_chem_fertilizer = s03q13, 
         dist_pest = s03q15)
dist_agric |> vis_miss() # too many missing observations
```

```{r hh_food_prod}

### Households' food production ###

hh_food_prod <- s16a_me_agric %>% 
  select(vague, grappe, menage, s16aq02, s16aq07, s16aq08, s16aq09a, s16aq09b) %>% 
  rename(champ = s16aq02,
         nb_culture = s16aq07,
         princ_culture = s16aq08,
         unit_superf = s16aq09b) %>% 
  mutate(princ_culture = as_factor(princ_culture),
         unit_superf = if_else(s16aq09a > 4000, 2, unit_superf), # treatment of outliers
         superficie_ha = if_else(unit_superf == 2, s16aq09a/10000, s16aq09a) # convert sqrm to ha
         ) %>% 
  mutate(superficie_ha = if_else(is.na(superficie_ha), 0, superficie_ha)) |> 
  filter(!princ_culture == 'NA') %>% 
  left_join(survey_welfare %>% select(hhid, id_adm1, id_adm2, vague, grappe, menage, zae, region, milieu, hhweight, hhsize), by = c("vague", "grappe", "menage")) %>% 
  mutate(zae = as_factor(zae),
         region = str_to_title(as_factor(region)),
         milieu = str_to_title(as_factor(milieu)))

# note: 3615 households, out of the 6024 in the sample, are included. The majority are rural households.

## Cultivated area per HH ##

cultivated_area <- hh_food_prod %>%
  select(hhid, superficie_ha) %>% 
  group_by(hhid) %>% 
  summarize(hh_total_superf = sum(superficie_ha)) %>% # total cultivated area per HH
  ungroup() %>% 
  mutate(hh_total_superf = if_else(is.na(hh_total_superf), 0, hh_total_superf)) %>%
  select(hhid, hh_total_superf)

## Diversity of cultivated crops per HH ##

# crop_diversity <- hh_food_prod %>% 
#  select(hhid, princ_culture, superficie_ha) %>% 
#  pivot_wider(names_from = princ_culture, values_from = superficie_ha, 
#              values_fn = sum, names_prefix = "i_", values_fill = 0) %>% 
#  group_by(hhid) %>% 
#  summarize(crop_diversity = simpson(starts_with('i_'))) %>% # simpson index (one crop = 1, more crops --> 0) 
#  ungroup() %>% 
#  select(hhid, crop_diversity)

```

```{r food_employment}

### Food employment ###

# 1. Create a typology of food employment, cf. Allen et al. (2018)
food_employment <- s04_me_employment %>% 
  select(vague, grappe, menage, 
         id_ind = s01q00a, # id ind
         main_empl = s04q28a, # primary job
         month_main_empl = s04q32, # prim. job - total months worked
         day_main_empl = s04q36, # prim. job - days per month worked
         hour_main_empl = s04q37, # prim. job - hours per day worked
         starts_with("s04q29"), # prim. job - job category
         starts_with("s04q30"), # prim. job - activity category
         sec_empl = s04q28b, # secondary job
         month_sec_empl = s04q54, # sec. job - total months worked
         day_sec_empl = s04q55, # sec. job - days per month worked 
         hour_sec_empl = s04q56, # sec. job - hours per day worked 
         starts_with("s04q51"), # prim. job - job category
         starts_with("s04q52") # prim. job - activity category
  ) %>% 
  mutate(
    main_empl = as_factor(main_empl),
    across(starts_with("s04q29"), as_factor),
    across(starts_with("s04q30"), as_factor),
    across(starts_with("s04q51"), as_factor),
    across(starts_with("s04q52"), as_factor)
  ) %>% 
  rename(
    prim_code_emploi = s04q29b,
    prim_code_prof = s04q29d,
    prim_code_section = s04q30b,
    prim_branche_activite = s04q30c,
    prim_code_activite = s04q30d,
    sec_code_emploi = s04q51b,
    sec_code_prof = s04q51d,
    sec_code_section = s04q52b,    
    sec_branche_activite = s04q52c,
    sec_code_activite = s04q52d,
  ) %>% 
  mutate(prim_food_empl = as_factor(case_when(
    # food agriculture
    prim_code_prof %in% c("éleveur de bétail", "Maraîcher", "Cultivateur") ~ "Food agriculture",
    prim_code_section == "Agriculture, pêche, foresterie" ~ "Food agriculture",
    prim_branche_activite %in% c("Agriculture vivrière et activités annexes", "Agriculture industrielle et d'exportation", "Sylviculture, exploitation forestière, activités annexes", "Elevage et chasse") ~ "Food agriculture",

    # food processing
    prim_branche_activite == "Fabrication de produits alimentaires et de boissons" ~ "Food processing",
    # food marketing
    prim_branche_activite == "Commerce de gros et activités d'intermédiaires du commerce de gros" & prim_code_activite == "Commerce de gros de produits agricoles bruts, d'animaux vivants, de produits alimentaires, boissons et tabacs" ~ "Food marketing",
    prim_code_activite %in% c("Commerce de détail de fruits et légumes", "Commerce de détail d’autres produits alimentaires", "Commerce de détail général (alimentation, boutique, épicerie, …)") ~ "Food marketing",
    prim_branche_activite == "Transports terrestres, transport par conduites" ~ "Food marketing",
    prim_code_emploi == "AGRICULTEURS ET OUVRIERS QUALIFIES DE L'AGRICULTURE ET LA PECHE" & prim_code_activite == "Commerce de détail d’autres produits (y compris activités d’intermédiaire du commerce de détail)" ~ "Food marketing",
    # food away-from-home
    prim_branche_activite == "Hôtels et restaurants" ~ "Food away-from-home",
    .default = "Other"
  )),
  sec_food_empl = as_factor(case_when(
    # food agriculture
    sec_code_prof %in% c("ouvrier qualifié de l'agriculture", "autres agriculteurs et ouvriers qualifies de l'agriculture et la peche non classé ailleurs", "Cultivateur", "éleveur de bétail", "Maraîcher", "Ouvrier, manœuvre agricole") ~ "Food agriculture",
    sec_code_section == "Agriculture, pêche, foresterie" ~ "Food agriculture",
    sec_branche_activite %in% c("Agriculture vivrière et activités annexes", "Agriculture industrielle et d'exportation", "Sylviculture, exploitation forestière, activités annexes", "Elevage et chasse") ~ "Food agriculture",
    sec_code_emploi %in% c("éleveur de bétail", "Maraîcher", "Cultivateur") ~ "Food agriculture",
    # food processing
    sec_branche_activite == "Fabrication de produits alimentaires et de boissons" ~ "Food processing",
    # food marketing
    sec_branche_activite == "Commerce de gros et activités d'intermédiaires du commerce de gros" & sec_code_activite == "Commerce de gros de produits agricoles bruts, d'animaux vivants, de produits alimentaires, boissons et tabacs" ~ "Food marketing",
    sec_code_activite %in% c("Commerce de détail de fruits et légumes", "Commerce de détail d’autres produits alimentaires", "Commerce de détail général (alimentation, boutique, épicerie, …)") ~ "Food marketing",
    sec_branche_activite == "Transports terrestres, transport par conduites" ~ "Food marketing",
    sec_code_emploi %in% c("AGRICULTEURS ET OUVRIERS QUALIFIES DE L'AGRICULTURE ET LA PECHE", "Ouvrier, manœuvre agricole") & sec_code_activite == "Commerce de détail d’autres produits (y compris activités d’intermédiaire du commerce de détail)" ~ "Food marketing",
    sec_code_prof %in% c("vendeur de fruits", "vendeur de céréales", "vendeur de vivres frais (alloco, igname, taro, autres féculents)", "vendeur de légumes et arachides et tous condiments", "Boucher - vendeur", "Docker") ~ "Food marketing",
    # food away-from-home
    sec_branche_activite == "Hôtels et restaurants" ~ "Food away-from-home",
    sec_code_prof %in% c("vendeur de beignets et d'autres aliments préparés (vendeur d'aliments)") ~ "Food away-from-home",
    .default = "Other"
  ))
  ) %>% 
    relocate(c("prim_food_empl", "sec_food_empl"))

# 2. Convert time worked in Full-time equivalent (FTE)
food_fte <- food_employment %>% 
  right_join(survey_ind %>% select(vague, grappe, menage, id_ind = numind, hhid, sexe, age), by =c("vague", "grappe", "menage", "id_ind")) %>% 
  mutate( # create full-time equivalent variable
    fte_prim = (hour_main_empl*day_main_empl*month_main_empl)/(40*52),
    fte_sec = (hour_sec_empl*day_sec_empl*month_sec_empl)/(40*52),
    fte_agriculture = case_when(
                prim_food_empl == "Food agriculture" ~ fte_prim,
                sec_food_empl == "Food agriculture" ~ fte_sec,
                .default = 0),
    fte_processing = case_when(
                prim_food_empl == "Food processing" ~ fte_prim,
                sec_food_empl == "Food processing" ~ fte_sec,
                .default = 0),
    fte_marketing = case_when(
                prim_food_empl == "Food marketing" ~ fte_prim,
                sec_food_empl == "Food marketing" ~ fte_sec,
                .default = 0),          
    fte_away_home = case_when(
                prim_food_empl == "Food away-from-home" ~ fte_prim,
                sec_food_empl == "Food away-from-home" ~ fte_sec,
                .default = 0)
  ) %>% 
  group_by(hhid) %>% 
  summarize(
    fte_agriculture = sum(fte_agriculture, na.rm = TRUE),
    fte_processing = sum(fte_processing, na.rm = TRUE),
    fte_marketing = sum(fte_marketing, na.rm = TRUE),
    fte_away_home = sum(fte_away_home, na.rm = TRUE)
    ) %>% 
  rowwise() %>% 
  mutate(fte_total = sum(c(fte_agriculture, fte_processing, fte_marketing, fte_away_home))) %>% 
  ungroup()

```

```{r food_consumption}

### Food Consumption ### 

food_consumption <- survey_welfare %>% 
  mutate(
    fcons_pc = dali/(eqadu1*def_spa*def_temp), # food consumption per capita
    fcons_pc_percentile_rank = percent_rank(fcons_pc), # percentile rank
    sh_fcons = (dali/dtot)*100 # share of food consumption in total consumption
  ) %>% 
  select(hhid, fcons_pc, fcons_pc_percentile_rank, sh_fcons)

### Food Consumption score ### 
```

```{r hh_char}

### HH characteristics ###  

hh_characteristics <- survey_welfare %>% 
  rename(
    h_literacy = halfab,
    h_gender = hgender,
    h_unemploy = hactiv12m 
  ) %>% 
  mutate(across(starts_with("h_"), as.factor),
         h_gender = if_else(h_gender==2, 1, 0),
         h_unemploy = if_else(h_unemploy==1 | h_unemploy==2, 1, 0)
         ) %>% # male=0, female=1
  select(hhid, h_literacy, h_gender, h_unemploy)
```

```{r merged_data}

# Combine all dataframes in a new dataset
merged_data <- survey_welfare %>% 
  select(hhid, grappe, region, zae, hhweight, id_adm1, id_adm2) %>% 
  left_join(cultivated_area, by = "hhid") %>% 
  mutate(hh_total_superf = if_else(is.na(hh_total_superf), 0, hh_total_superf)) |> 
  left_join(food_fte, by = "hhid") %>% 
  left_join(food_consumption, by = "hhid") %>% 
  left_join(hh_characteristics, by = "hhid")

```

```{r weighted_data}

# Survey design
survey_design <- merged_data %>% 
  as_survey_design(ids = c(grappe,hhid), 
                   strata = c(region, zae), 
                   weights = hhweight,
                   nest = TRUE)

# Create weighted variables 

wt_sh_fcons <- survey_design %>% 
  group_by(id_adm2) %>% 
  summarise(sh_food_cons = survey_mean(sh_fcons, na.rm = TRUE),
            food_cons_pc = survey_mean(fcons_pc_percentile_rank, na.rm = TRUE))

wt_crop_production <- survey_design %>% 
  group_by(id_adm2) %>%
  summarise(crops_diversity = survey_mean(crops_diversity, na.rm = TRUE),
            cultivated_area = survey_mean(hh_superf_percent_rank, na.rm = TRUE))
    
wt_empl_food <- survey_design %>% 
  group_by(id_adm2) %>% 
  summarise(empl_food_agriculture = survey_ratio(fte_agriculture, fte_total),
            empl_food_processing = survey_ratio(fte_processing, fte_total),
            empl_food_marketing = survey_ratio(fte_marketing, fte_total),
            empl_food_away_home = survey_ratio(fte_away_home, fte_total),
            )

wt_h_gender <- survey_design %>% 
  group_by(id_adm2, h_gender) %>% 
  summarise(pct = survey_prop()) %>% 
  select(id_adm2, h_gender, pct) %>% 
  pivot_wider(names_from = h_gender, values_from = pct) %>% 
  rename(hh_male = '0',
         hh_female = '1') %>% 
  ungroup()

wt_h_literacy <- survey_design %>% 
  group_by(id_adm2, h_literacy) %>% 
  summarise(pct = survey_prop()) %>% 
  select(id_adm2, h_literacy, pct) %>% 
  pivot_wider(names_from = h_literacy, values_from = pct) %>% 
  rename(hh_literacy = '1') %>% 
  select(id_adm2, hh_literacy) %>% 
  ungroup()

wt_h_handicap <- survey_design %>% 
  group_by(id_adm2, h_handicap) %>% 
  summarise(pct = survey_prop()) %>% 
  select(id_adm2, h_handicap, pct) %>% 
  pivot_wider(names_from = h_handicap, values_from = pct) %>% 
  rename(hh_handicap = '1') %>% 
  select(id_adm2, hh_handicap) %>% 
  ungroup()

wt_h_unemploy <- survey_design %>% 
  group_by(id_adm2, h_unemploy) %>% 
  summarise(pct = survey_prop()) %>% 
  select(id_adm2, h_unemploy, pct) %>% 
  pivot_wider(names_from = h_unemploy, values_from = pct) %>% 
  rename(hh_unemploy = '0') %>% 
  select(id_adm2, hh_unemploy) %>% 
  ungroup()

# Merge all weighted data in a single data set
wt_cluster_data <- wt_sh_fcons %>% 
  left_join(wt_crop_production, by = "id_adm2") %>% 
  left_join(wt_empl_food, by = "id_adm2") %>% 
  left_join(wt_h_gender, by = "id_adm2") %>% 
  left_join(wt_h_literacy, by = "id_adm2") %>%  
  left_join(wt_h_handicap, by = "id_adm2") %>% 
  left_join(wt_h_unemploy, by = "id_adm2") %>% 
  select(-ends_with("_se"))

# vis_dat(wt_cluster_data)
wt_cluster_data <- wt_cluster_data %>% 
  mutate(across(hh_male:hh_unemploy, \(x) replace_na(x, 0)))

# Add labels to new variables
var_label(wt_cluster_data) <- list(
  id_adm2 = "ID ADM-2",
  sh_food_cons = "Average share of food consumption in households' total expenditures",
  food_cons_pc = "Average percentile rank at the country-level of households' food consumption per capita",
  crops_diversity = "Food crops diversity cultivated by households (Simpson Index)",
  cultivated_area = "Average percentile rank at the country-level of households' cultivated area",
  empl_food_agriculture = "Avarage share of food agriculture jobs in food employment at the ADM-2 level",
  empl_food_processing = "Avarage share of food processing jobs in food employment at the ADM-2 level",
  empl_food_marketing = "Avarage share of food marketing jobs in food employment at the ADM-2 level",
  empl_food_away_home = "Avarage share of food away-from-home jobs in food employment at the ADM-2 level",
  hh_female = "Average share of female-led households at the ADM-2 level",
  hh_literacy = "Average share of household heads who knows how to read",
  hh_handicap = "Average share of household heads with an handicap",
  hh_unemploy = "Average share of household heads who are unemployed"
)

```

```{r cluster_data}

load(here('data', 'production.RData'))
load(here('data', 'consumption.RData'))

cluster_data <- merge(consumption %>% st_drop_geometry(), 
                      production %>% st_drop_geometry(), 
                      by = 'grappe')

cluster_data <- cluster_data %>% 
  rename(
    `Local market relative prices` = price_diff_mean,
    `Distance to closest marketplace` = distance_marketplace,
    `Livestock per HH (TLU)` = livestock_tlu_avg,
    `Poverty incidence` = pov,
    `Frequency of violent events` = freq_vio_events,
    `Landless only HH` = landless_only,
    `Landless Pastoralist HH`= landless_pastoral,
    `Car ownership` = car,
    `Unhealthy diet in the last 12 months` = healthy_diet,
    `Distance to closest school` = distance_school,
    `Fridge ownership` = fridge,
    `Waster disposal` = waste,
    `Net loss of croplands, 2000-2019`,
    `Water depletion` = water_depletion,
    `Mean Precipitation` = total_precipitation,
    `Mean Temperature` = mean_temp,
    `Food agriculture employment` = empl_food_agriculture,
    `Food processing employment` = empl_food_processing,
    `Food marketing employment` = empl_food_marketing,
    `Food-away-from-home employment` = empl_food_away_home,
    `Crop production` = crop_production_total
  )

```

```{r labels}
# Add labels to new variables
var_label(cluster_data) <- list(
  grappe = "Enumeration Areas",
)

save(cluster_data, file = here('data','cluster_data.RData'))

```

# Vulnerability profiles

Objective: account for local creation and reinforcement of vulnerability

## Correlation matrix

```{r corr_matrix}

cluster_df <- column_to_rownames(cluster_data, var = "grappe")
cluster_norm <- scale(cluster_df) |> 
  as.data.frame()

# GGally::ggpairs(cluster_df)
# ppsr::visualize_pps(cluster_df)

corr_matrix <- cor(scale(cluster_df))
score_matrix <- score_matrix(cluster_df)
# cov_matrix <- cov(cluster_df)

# ggcorrplot(corr_matrix)

# tmwr_cols <- colorRampPalette(c("#91CBD765", "#CA225E"))
# corr_matrix %>% 
#  corrplot(col = tmwr_cols(200), tl.col = "black", method = "ellipse")

# PerformanceAnalytics::chart.Correlation(cluster_df, method = "pearson")
# PerformanceAnalytics::chart.Correlation(cluster_norm, method = "pearson")

# heatmap
# heatmap(corr_matrix, scale = "none")
heatmap(score_matrix, scale = "none")

col <- colorRampPalette(brewer.pal(10, "RdYlBu"))(256)
heatmap(corr_matrix, scale = "none", col =  rev(col))

# ppsr::visualize_pps(df = cluster_df)

# gplots::heatmap.2(corr_matrix, scale = "none", col = bluered(100),t race = "none", density.info = "none")
```

```{r png_matrix}

png(file=here('outputs', 'heatmap_corr.png'),
width=1000, height=800)
col <- colorRampPalette(brewer.pal(10, "RdYlBu"))(256)
heatmap(corr_matrix, scale = "none", col =  rev(col))
dev.off()

png(file=here('outputs', 'heatmap_pps.png'),
width=1000, height=800)
heatmap(score_matrix, scale = "none")
dev.off()
```

```{r indicator_balancing}

indicator_balancing <- column_to_rownames(cluster_data, var = "grappe") %>% 
  select(-c(croplands_2019_netgain, # potential
            livestock_tlu_total, livestock_tlu_median, # availability
            livestock_large_pct, feed_prod_kcal, 
            food_prod_kcal, feed_prod_kcal, crop_production_diversity,
            fatalities, distance_main_road, price_diff_median, auto_conso, # access
            price_change_season_mean, price_change_season_median,
            cropping_only, cropping_pastoral,
            varied_diet, cooking_stove # utilization
))

cluster_norm_balanced <- as.data.frame(scale(indicator_balancing))

corr_matrix_balanced <- cor(scale(cluster_norm_balanced))
# score_matrix_b <- score_matrix(cluster_norm_b)
```

| Potential              | Availability             | Access               | Utilization     |
|------------------------|--------------------------|----------------------|-----------------|
| croplands_2019_netloss | crop_production_total    | distance_marketplace | healthy_diet    |
| water_depletion        | livestock_tlu_avg        | car                  | distance_school |
| total_precipitation    | prod_stock               | pov                  | fridge          |
| mean_temp              | empl_food_agriculture    | price_diff_mean      | waste           |
|                        | empl_food_processing     | landless_only        |                 |
|                        | empl_food_marketing      | landless_pastoral    |                 |
|                        | empl_food_food_away_home | freq_vio_events      |                 |

## PCA

```{r pca_norm}

data_pca <- princomp(cluster_norm_balanced)
summary(data_pca)
data_scores <- data_pca$scores[, 1:5]

# loadings of each principal component
# data_pca$loadings[, 1:5]

# Eigen value / scree plot
get_eig(data_pca)
fviz_eig(data_pca)

res.pca <- PCA(cluster_norm_balanced, graph = FALSE)
summary(res.pca)
res.scores <- res.pca$ind$coord
# Kaizer criterion: keep eigenvalue PC > 1
# res.pca$eig[,1]^2

# biplot of the attributes
# fviz_pca_var(data_pca, col.var = "black")
# contribution of each variable (cos2 = quality of representation)
fviz_cos2(data_pca, choice = "var", axes = 1:2)
# biplot combined with cos2
fviz_pca_var(data_pca, col.var = "cos2",
             gradient.cols = c("grey", "orange", "red"),
             repel = TRUE)

```

```{r png_eig}

eig <- get_eig(data_pca) %>% rownames_to_column() %>% select(pc = rowname, cumulative.variance.percent) %>% 
  mutate(pc = as_factor(pc)) |> 
  slice_min(pc, n = 10) |> 
  pivot_longer(cols = cumulative.variance.percent, 
               names_to = "name", values_to = "value")

png(file=here('outputs', 'eig_bar.png'),
width=700, height=500)
ggplot(data=eig, aes(x=pc, y=value, fill = pc)) +
geom_bar(stat="identity", color="black", position=position_dodge()) +
  scale_fill_manual(values=c("white", "white", "white",  "white", "#005DB9",
                             "white",  "white", "white",  "white","white")) +
  geom_hline(yintercept=66, linetype="dashed", color = "#005DB9") +
  labs(x = "Principal components", y = "Cumulative variance explained (%)") +
  theme_minimal() +
  theme(legend.position = "none",
        panel.grid.major.x = element_blank())
dev.off()

```

## Hierarchical clustering

Ward's method

```{r distance}

data_dist <- dist(data_scores, method = "euclidian") # distance matrix
data_daisy <- daisy(data_scores)

res.dist <- dist(res.scores, method = "euclidian")
res.daisy <- daisy(res.scores)

```

```{r hcluster}

data_tree <- hclust(data_dist, method = "ward.D2")
# res.tree <- hclust(res.dist, method = "ward.D2")

# measure how well the cluster tree reflects the data: compute correlation between the cophenetic distances and the distance matrix (i.e. here factor scores); high correlation means high accuracy of the clustering solution.
tree_coph <- cophenetic(data_tree)
cor(data_dist, tree_coph)
# test different distance methods

# kmeans
# fviz_nbclust(data_scores, kmeans, method = "silhouette")
# fviz_nbclust(data_scores, kmeans, method = "wss")

# heatmap
# pheatmap::pheatmap(data_dist, cutree_rows = 3)

# https://statsandr.com/blog/clustering-analysis-k-means-and-hierarchical-clustering-by-hand-and-in-r/#optimal-number-of-clusters

# load required packages
library(factoextra)
library(NbClust)

res <- NbClust(data_scores, distance = "euclidean", min.nc=2, max.nc=6,
        method = "ward.D2", index = "all")
res <- NbClust(data_scores, distance = "euclidean", min.nc=2, max.nc=6,
        method = "ward.D", index = "all")
res <- NbClust(data_scores, distance = "euclidean", min.nc=2, max.nc=6,
        method = "kmeans", index = "all")

# Cut dataframe by cluster
cluster_2 <- cutree(data_tree, k = 2)
cluster_tree_2 <- data.frame(cluster_2, cluster_norm_balanced)

cluster_3 <- cutree(data_tree, k = 3)
cluster_tree_3 <- data.frame(cluster_3, cluster_norm_balanced)

cluster_4 <- cutree(data_tree, k = 4)
cluster_tree_4 <- data.frame(cluster_4, cluster_norm_balanced)

cluster_5 <- cutree(data_tree, k = 5)
cluster_tree_5 <- data.frame(cluster_5, cluster_norm_balanced)

# rownames(cluster_norm)[cluster == 1]

```

```{r png_hclust}

palette_profiles_2 <- c("#FFC000", "#FA4926", "#00CC66")
palette_profiles_3 <- c("#FFC000", "#FA4926", "#00CC66")
palette_profiles_4 <- c("#FFC000", "#FA4926", "#00CC66", "blue")
palette_profiles_5 <- c("#FFC000", "#FA4926", "#00CC66", "blue", "purple")


# Clusters = 3
png(file=here('outputs', 'hclust_3.png'),
width=700, height=500)
# graph visualization
require("igraph")
fviz_dend(data_tree, k = 3,
     cex = .5, # label size
     rect = TRUE,
     k_colors = palette_profiles
)
dev.off()

# Clusters = 4
png(file=here('outputs', 'hclust_4.png'),
width=700, height=500)
# graph visualization
require("igraph")
fviz_dend(data_tree, k = 4, 
     cex = .5, # label size
     horiz = TRUE,
     k_colors = "jco", # other option: c("#2E9FDF", "#00AFBB", "E7B800", "#FC4E07")
     rect = TRUE,
     rect_border = "jco",
     rect_fill = TRUE
)
dev.off()

# Clusters = 5
png(file=here('outputs', 'hclust_5.png'),
width=700, height=500)
# graph visualization
require("igraph")
fviz_dend(data_tree, k = 5, 
     cex = .5, # label size
     horiz = TRUE,
     k_colors = "jco", # other option: c("#2E9FDF", "#00AFBB", "E7B800", "#FC4E07")
     rect = TRUE,
     rect_border = "jco",
     rect_fill = TRUE
)
dev.off()

# No color
png(file=here('outputs', 'hclust.png'),
width=700, height=500)
# graph visualization
require("igraph")
fviz_dend(data_tree, 
          horiz = TRUE,
          cex = .5 # label size
)
dev.off()

```

```{r contributation_indicators}

# estimate mean of all variables
mean_total <- bind_rows(map(cluster_norm_balanced, mean)) |> 
  pivot_longer(everything()) |> 
  mutate(
    dimension = fct_relevel(as_factor(case_when(
      name %in% c('croplands_2019_netloss', 'water_depletion', 'total_precipitation', 'mean_temp') ~ 'Potential',
      name %in% c('prod_stock', 'empl_food_agriculture', 'empl_food_processing', 'empl_food_marketing', 'empl_food_away_home', 'livestock_tlu_avg', 'crop_production_total') ~ 'Availability',
      name %in% c('price_diff_mean', 'distance_marketplace', 'pov', 'freq_vio_events', 'landless_only', 'landless_pastoral', 'car') ~ 'Access',
      name %in% c('healthy_diet', 'distance_school', 'fridge', 'waste') ~ 'Utilization'
  )), "Potential", "Availability", "Access", "Utilization"),
  category = if_else(dimension %in% c("Potential", "Availability"), "Production", "Consumption")
  )

# estimate mean for each cluster
mean_cluster <- cluster_tree_5 |> 
  rename(cluster = cluster_5) %>% 
  group_by(cluster) |> 
  summarize(across(where(is.numeric), ~ mean(.x, na.rm = TRUE))) %>% 
  mutate(cluster = as.factor(cluster))

mean_cluster_list <- split(mean_cluster, 1:nrow(mean_cluster))
mean_cluster_list <- lapply(mean_cluster_list, function(df) pivot_longer(df, !cluster))
       
mean_cluster_list <- lapply(mean_cluster_list, function(df) merge(df, mean_total, by = "name", suffixes = c(".cluster",".total")))

# estimate difference between total and cluster means
mean_cluster_list <- lapply(mean_cluster_list, function(df) mutate(df, diff = value.cluster - value.total))

palette_dim <- c('#005DB9', '#C4EAFF', '#7030A0', '#EFE5F7')
palette_cat <- c('#005DB9', '#7030A0')

mean_cluster_5 <- rbindlist(mean_cluster_list) %>% 
    mutate(name = reorder_within(name, diff, cluster))

ggplot(mean_cluster_5) +
    geom_bar(aes(x =name, y = diff, fill = dimension), 
             stat = "identity") +
    coord_flip() +
    scale_fill_manual(values = c('#C4EAFF', '#005DB9', '#7030A0', '#EFE5F7')) +
    labs(x = "Factor", y = "Deviation from average profile") +
    scale_x_reordered() +
    theme_minimal() +
    facet_wrap(~cluster, scales = "free")
    


# deviation from average for all variables for each cluster
lapply(mean_cluster_list, function(df)
  ggplot(df) +
    geom_bar(aes(x = reorder(name, diff), y = diff, fill = dimension), 
             stat = "identity") +
    coord_flip() +
    scale_fill_manual(values = c('#C4EAFF', '#005DB9', '#7030A0', '#EFE5F7')) +
    labs(x = "Factor", y = "Deviation from average profile") +
    theme_minimal()
  )

```

```{r contrib_summary}

# estimate mean of all variables
mean_total <- bind_rows(map(cluster_b |> column_to_rownames(var = ), summary)) |> 
  pivot_longer(everything())

mean_total <- cluster_b |> 
  map(~summary(.x)) %>%  # compute summary of each var
  do.call(rbind, .) |>  # bind list elements into df
  data.frame() |> 
  rename(`1st Qu.` = 'X1st.Qu.', `3rd Qu.` = 'X3rd.Qu.')

# estimate mean for each cluster
mean_cluster <- cluster_tree |> 
  group_by(cluster) |> 
  summarize(across(where(is.numeric), ~ mean(.x, na.rm = TRUE))) %>% 
  mutate(cluster = as.factor(cluster))

mean_cluster <- cluster_tree |> 
  pivot_longer(cols = -cluster, names_to = 'var', values_to = 'value') |> 
  group_by(cluster, var) |> 
  summarize(
    `Min.` = summary(value)[1],
    `1st Qu.` = summary(value)[2],
    `Median` = summary(value)[3],
    `Mean` = summary(value)[4],
    `3rd Qu.` = summary(value)[5],
    `Max.` = summary(value)[6]
  )
    
mean_cluster |> 
  group_by(cluster) |> 
  group_map(~ setdiff(.x[,-1], mean_total))
```

```{r spatial_distribution}

## TWO Clusters
cluster_2 <- cluster_tree_2 |> 
  rename(cluster = cluster_2) %>% 
  rownames_to_column(var = "grappe") |> 
  select(grappe, cluster) |> 
  mutate(`Food security profile` = case_when(
    cluster == 1 ~ 'Cluster 1',
    cluster == 2 ~ 'Cluster 2'
  ))

# Merge with grappe_sf
grappe_cluster_2 <- cluster_2 |> 
  merge(grappe_sf, by = "grappe") |> 
  st_as_sf()

st_write(grappe_cluster_sf, here('data', 'grappe_cluster_2.shp'))

## THREE Clusters
cluster_3 <- cluster_tree_3 |> 
  rename(cluster = cluster_3) %>% 
  rownames_to_column(var = "grappe") |> 
  select(grappe, cluster) |> 
  mutate(`Food security profile` = case_when(
    cluster == 1 ~ 'Cluster 1',
    cluster == 2 ~ 'Cluster 2',
    cluster == 3 ~ 'Cluster 3'
  ))

grappe_cluster_3 <- cluster_3 |> 
  merge(grappe_sf, by = "grappe") |> 
  st_as_sf()

st_write(grappe_cluster_sf, here('data', 'grappe_cluster_3.shp'))

## FOUR Clusters
cluster_4 <- cluster_tree_4 |> 
  rename(cluster = cluster_4) %>% 
  rownames_to_column(var = "grappe") |> 
  select(grappe, cluster) |> 
  mutate(`Food security profile` = case_when(
    cluster == 1 ~ 'Cluster 1',
    cluster == 2 ~ 'Cluster 2',
    cluster == 3 ~ 'Cluster 3',
    cluster == 4 ~ 'Cluster 4'
  ))

grappe_cluster_4 <- cluster_4 |> 
  merge(grappe_sf, by = "grappe") |> 
  st_as_sf()

st_write(grappe_cluster_4, here('data', 'grappe_cluster_4.shp'))

## FIVE Clusters
cluster_5 <- cluster_tree_5 |> 
  rename(cluster = cluster_5) %>% 
  rownames_to_column(var = "grappe") |> 
  select(grappe, cluster) |> 
  mutate(`Food security profile` = case_when(
    cluster == 1 ~ 'Cluster 1',
    cluster == 2 ~ 'Cluster 2',
    cluster == 3 ~ 'Cluster 3',
    cluster == 4 ~ 'Cluster 4',
    cluster == 5 ~ 'Cluster 5'
  ))

grappe_cluster_5 <- cluster_5 |> 
  merge(grappe_sf, by = "grappe") |> 
  st_as_sf()

st_write(grappe_cluster_5, here('data', 'grappe_cluster_5.shp'))


# Map cluster points
tmap_mode("view")
tm_shape(adm03) +
  tm_polygons(alpha = 0) +
  tm_shape(grappe_cluster_sf) +
  tm_symbols(col = "Food security profile", 
             alpha = .6,
             palette = palette_profiles_5,
             size = .3) +
  tm_layout(legend.width = 6,
            legend.height = 4)

## Aggregate ADM2
# load(here('data','short_survey.RData'))

suvery_cluster <- grappe_cluster %>%
  mutate(grappe = as.numeric(grappe)) %>% 
  left_join(survey_welfare %>% 
              select(hhid, grappe, region, zae, hhweight, id_adm1, id_adm2), 
              by = "grappe")

survey_design <- suvery_cluster %>% 
  as_survey_design(ids = c(grappe,hhid), 
                   strata = c(region, zae), 
                   weights = hhweight,
                   nest = TRUE)

# Estimate proportions of each cluster in ADM2
cluster_idm2 <- survey_design %>% 
  group_by(id_adm2, cluster) %>% 
  summarise(pct = 100*survey_prop(), vartype = "ci") %>% 
  select(-vartype) %>% 
  pivot_wider(names_from = cluster, values_from = c(pct, pct_se), values_fill = 0) %>% 
  select(-c(starts_with("pct_se")))
  
# Join with grappe_cluster_sf
cluster_idm2_sf <- left_join(adm02, cluster_idm2, by = "id_adm2")

## merge ner_grid + pop

# # load("data/ner_grid.RData")
# load("data/grid3_settlement.RData")

grid3_centroid = st_centroid(grid3)

pop_grid_centroid <- st_join(ner_grid, grid3_centroid)

pop_grid <- pop_grid_centroid %>% 
  group_by(grid_id) %>% 
  summarize(pop_un = sum(pop_un_adj, na.rm = TRUE),
            rev_log_pop_un = 1/log10(pop_un))



tm_shape(pop_grid) +
  tm_polygons(col = "log_pop_un", style = "jenks", palette = "viridis") +
  tm_layout(frame = FALSE, legend.outside = TRUE)

pop_grid_cluster_idm2_sf <- st_join(pop_grid, cluster_idm2_sf)

tm_shape(cluster_idm2_sf) +
  tm_polygons(col = "pct_1", title = "", style = "quantile", border.col = 'white',
              style = "quantile") +
  tm_layout(frame = FALSE, legend.outside = TRUE,
            legend.text.size = .5)

# merge adm3 + cluster


base <- grappe_cluster |> select(cluster, hhweight) |> 
  mutate(x = sf::st_coordinates(geometry)[,1],
         y = sf::st_coordinates(geometry)[,2])

base_distinct <- distinct(base)

base_cluster <- aggregate(hhweight ~ x+y, base, sum)

base.ppp = ppp(base$x, base$y,
                         c(min(base$x), max(base$x)),
                         c(min(base$y), max(base$y))
                         )
densite <- density.ppp(base.ppp, sigma = 200, weights = base_distinct$hhweight)

plot(densite)
```

```{r}

# Map gridded-population
png(file=here('outputs', 'map_log_pop_un.png'),
width=700, height=500)
tm_shape(pop_grid) +
  tm_polygons(col = "log_pop_un", style = "jenks", palette = "viridis") +
  tm_layout(frame = FALSE, legend.outside = TRUE)
dev.off()

```

```{r cluster_map}

png(file=here('outputs', 'map_cluster_3.png'),
width=700, height=500)
tm_shape(adm03) +
  tm_polygons(alpha = 0) +
  tm_shape(grappe_cluster_sf) +
  tm_symbols(size = .5, col = "Food security profile", 
             alpha = .6,
             palette = palette_profiles) +
  tm_layout(legend.width = 6,
            legend.height = 4)
dev.off()

# Cluster 5
png(file=here('outputs', 'map_cluster_5.png'),
width=700, height=500)
tm_shape(adm03) +
  tm_polygons(alpha = 0) +
  tm_shape(grappe_cluster_sf) +
  tm_symbols(col = "Food security profile", 
             alpha = .6,
             palette = palette_profiles_5,
             size = .5) +
  tm_layout(legend.width = 6,
            legend.height = 4)
dev.off()


    cluster == 1 ~ 'Subsistence farming (Low Production)',
    cluster == 2 ~ 'Urban areas (High Access, Low Availability)',
    cluster == 3 ~ 'Food basket (High Production, Low Consumption)'

png(file=here('outputs', 'map_cluster_subs_idm2.png'),
width=700, height=500)
tm_shape(cluster_idm2_sf) +
  tm_polygons(col = "pct_1", title = "", style = "quantile", border.col = 'white',
              palette = "Reds") +
  tm_layout(frame = FALSE, legend.outside = TRUE,
            legend.text.size = .5)
dev.off()

png(file=here('outputs', 'map_cluster_urb_idm2.png'),
width=700, height=500)
tm_shape(cluster_idm2_sf) +
  tm_polygons(col = "pct_2", title = "", style = "quantile", border.col = 'white',
              palette = "Greens") +
  tm_layout(frame = FALSE, legend.outside = TRUE,
            legend.text.size = .5)
dev.off()

png(file=here('outputs', 'map_cluster_foodb_idm2.png'),
width=700, height=500)
tm_shape(cluster_idm2_sf) +
  tm_polygons(col = "pct_3", title = "", style = "quantile", border.col = 'white',
              palette = "Oranges") +
  tm_layout(frame = FALSE, legend.outside = TRUE,
            legend.text.size = .5)
dev.off()
```

Density is used as an illustrative variable \[include it in the mapping?\]

```{r}
load(here('data', 'short_survey.RData'))

grappe_cluster_group <- left_join(cluster_2 %>% select(-`Food security profile`) %>% rename(cluster_2 = cluster),
          cluster_3 %>% select(-`Food security profile`) %>% rename(cluster_3 = cluster),
          by = 'grappe') %>% 
  left_join(cluster_4 %>% select(-`Food security profile`) %>% rename(cluster_4 = cluster),
          by = 'grappe') %>% 
  left_join(cluster_5 %>% select(-`Food security profile`) %>% rename(cluster_5 = cluster),
          by = 'grappe')


survey_cluster <- survey_welfare %>% 
  select(hhid, grappe, region, milieu, hhweight) %>% 
  mutate(grappe = as_factor(grappe)) %>% 
  left_join(grappe_cluster_group %>% mutate(grappe = as_factor(grappe)), by = 'grappe') %>% 
  as_survey_design(ids = c(grappe,hhid), 
                   strata = c(region, milieu), 
                   weights = hhweight,
                   nest = TRUE)

survey_cluster %>% 
  group_by(cluster_2) %>% 
  summarize(pct = survey_prop())
  
survey_cluster %>% 
  group_by(cluster_3) %>% 
  summarize(pct = survey_prop())

survey_cluster %>% 
  group_by(cluster_4) %>% 
  summarize(pct = survey_prop())

survey_cluster %>% 
  group_by(cluster_5) %>% 
  summarize(pct = survey_prop())
```

# GIS / spatial analysis

Objective: map the spatial distribution of each vulnerability profile and compare them to various hazards.

```{r map_cluster}

cluster_sf <- rownames_to_column(cluster_tree, var = "id_adm2") %>% right_join(adm02, by = "id_adm2") %>% st_as_sf()

tm_shape(cluster_sf) + 
  tm_polygons(col = "cluster")

cluster_sttl_sf <- rownames_to_column(cluster_tree, var = "id_adm2") %>% select(id_adm2, cluster) %>% right_join(grid3_settlement, by = "id_adm2") %>% st_as_sf()

tm_shape(cluster_sf) + 
  tm_polygons(col = "cluster")
tm_shape(cluster_sttl_sf) + 
  tm_polygons(col = "pop_un_adj")

```

## Spatial clustering (spatial autocorrelation)

Global Moran's I and Geary's C statistics on each vulnerability profile

Spatial distribution / spatial overlay of each vulnerability profile with different hazards' delineations

## Spatial interpolation

# Sensitivity and uncertainty analysis

Hex grid / ADM

K-Means algorithm, Fuzzy geographically weighted clustering adds neighborhood and population effect
